openapi: 3.0.1
info:
  title: /
  version: 0.1.0
servers:
- url: "{server}:{port}/"
  variables:
    server:
      default: "localhost"
    port:
      default: "8081"
paths:
  /ip:
    get:
      summary: Returns the client IP address.
      operationId: getIp
      responses:
        "202":
          description: Accepted
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /user-agent:
    get:
      summary: |-
        Returns the value of the user-agent header
        The http:header annotation ensures that a default error message will be automatically
        created and returned if the header can't be found.
      operationId: getUserAgent
      parameters:
      - name: user-agent
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ua_response'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /uuid:
    get:
      summary: Returns a unique ID as per UUID v4 spec
      operationId: getUuid
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid_response'
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  /base64/decode/{value}:
    post:
      operationId: postBase64DecodeValue
      parameters:
      - name: value
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/base64_response'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/error_response'
                - $ref: '#/components/schemas/ErrorPayload'
  /base64/encode/{value}:
    post:
      operationId: postBase64EncodeValue
      parameters:
      - name: value
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/base64_response'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/error_response'
                - $ref: '#/components/schemas/ErrorPayload'
  /ai/spelling:
    post:
      operationId: postAiSpelling
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ai_spelling_payload'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ai_spelling_response'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/error_response'
                - $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
components:
  schemas:
    ErrorPayload:
      required:
      - message
      - method
      - path
      - reason
      - status
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
          format: int64
        reason:
          type: string
        message:
          type: string
        path:
          type: string
        method:
          type: string
    ai_spelling_payload:
      required:
      - text
      type: object
      properties:
        text:
          maxLength: 100
          pattern: "^[\\w\\s]+$"
          type: string
    ai_spelling_response:
      required:
      - correctedText
      type: object
      properties:
        correctedText:
          maxLength: 150
          pattern: "^[\\w\\s]+$"
          type: string
    base64_response:
      type: object
      properties:
        value:
          maxLength: 100
          pattern: "^[0-9\\.]+$"
          type: string
      additionalProperties: false
    error_response:
      type: object
      properties:
        message:
          maxLength: 50
          type: string
        code:
          maxLength: 10
          type: string
      additionalProperties: false
    ua_response:
      type: object
      properties:
        user-agent:
          type: string
      additionalProperties: false
    uuid_response:
      type: object
      properties:
        uuid:
          maxLength: 36
          minLength: 36
          pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          type: string
      additionalProperties: false
